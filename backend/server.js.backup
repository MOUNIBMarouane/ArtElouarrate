import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import dotenv from 'dotenv';

// Initialize ES module dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Load environment variables
dotenv.config();

const app = express();
const port = process.env.PORT || 3000;

// Database connection
let prisma = null;
let dbConnected = false;

// Try to connect to database
async function initDatabase() {
  if (process.env.DATABASE_URL) {
    try {
      const { PrismaClient } = await import('@prisma/client');
      prisma = new PrismaClient();
      await prisma.$connect();
      dbConnected = true;
      console.log('‚úÖ Connected to Railway PostgreSQL');
    } catch (error) {
      console.log('‚ö†Ô∏è Database connection failed, using mock data:', error.message);
      dbConnected = false;
    }
  } else {
    console.log('Ì≥ù No DATABASE_URL found, using mock data');
  }
}

// Middleware
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? ['https://*.railway.app'] 
    : ['http://localhost:3000', 'http://localhost:8080'],
  credentials: true
}));
app.use(helmet());
app.use(compression());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'ok',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV,
    database: dbConnected ? 'Railway PostgreSQL Connected' : 'Mock Data Mode'
  });
});

// Test endpoint
app.get('/api/test', (req, res) => {
  res.json({
    message: 'ELOUARATE ART API is working!',
    environment: process.env.NODE_ENV,
    database: dbConnected ? 'Connected to Railway PostgreSQL' : 'Using mock data',
    timestamp: new Date().toISOString()
  });
});

// Database test endpoint
app.get('/api/db-test', async (req, res) => {
  if (!dbConnected || !prisma) {
    return res.json({
      success: false,
      message: 'Database not connected',
      usingMockData: true
    });
  }

  try {
    // Try a simple query
    const result = await prisma.$queryRaw`SELECT 1 as test`;
    res.json({
      success: true,
      message: 'Database connection working!',
      result: result,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Database query failed',
      error: error.message
    });
  }
});

// Artworks endpoint - with database fallback
app.get('/api/artworks', async (req, res) => {
  // If database is connected, try to get real data
  if (dbConnected && prisma) {
    try {
      // Check if artwork table exists and get data
      const artworks = await prisma.artwork.findMany({
        where: { isActive: true },
        include: {
          category: true,
          images: true
        }
      }).catch(() => []);

      if (artworks.length > 0) {
        return res.json({
          success: true,
          data: artworks,
          total: artworks.length,
          source: 'database'
        });
      }
    } catch (error) {
      console.log('Database query failed, using mock data:', error.message);
    }
  }

  // Fallback to mock data
  res.json({
    success: true,
    data: [
      {
        id: '1',
        name: 'Abstract Harmony',
        description: 'A beautiful abstract piece showcasing vibrant colors and flowing forms',
        price: 299.99,
        category: { name: 'Abstract', color: '#6366f1' },
        isActive: true,
        images: []
      },
      {
        id: '2',
        name: 'Ocean Dreams', 
        description: 'Serene ocean landscape capturing the beauty of nature',
        price: 450.00,
        category: { name: 'Landscape', color: '#10b981' },
        isActive: true,
        images: []
      },
      {
        id: '3',
        name: 'Portrait in Light',
        description: 'Stunning portrait work with masterful use of light and shadow',
        price: 650.00,
        category: { name: 'Portrait', color: '#f59e0b' },
        isActive: true,
        images: []
      }
    ],
    total: 3,
    source: 'mock'
  });
});

// Categories endpoint - with database fallback
app.get('/api/categories', async (req, res) => {
  // If database is connected, try to get real data
  if (dbConnected && prisma) {
    try {
      const categories = await prisma.category.findMany({
        where: { isActive: true },
        orderBy: { sortOrder: 'asc' }
      }).catch(() => []);

      if (categories.length > 0) {
        return res.json({
          success: true,
          data: categories,
          source: 'database'
        });
      }
    } catch (error) {
      console.log('Database query failed, using mock data:', error.message);
    }
  }

  // Fallback to mock data
  res.json({
    success: true,
    data: [
      { id: '1', name: 'Abstract', description: 'Abstract art pieces', color: '#6366f1', isActive: true },
      { id: '2', name: 'Landscape', description: 'Nature and landscape art', color: '#10b981', isActive: true },
      { id: '3', name: 'Portrait', description: 'Portrait artwork', color: '#f59e0b', isActive: true }
    ],
    source: 'mock'
  });
});

// Error handling
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ 
    error: 'Something went wrong!',
    message: process.env.NODE_ENV === 'development' ? err.message : 'Internal server error'
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Route not found',
    path: req.originalUrl
  });
});

// Initialize database and start server
async function startServer() {
  await initDatabase();
  
  app.listen(port, '0.0.0.0', () => {
    console.log('Ìæ® ===============================================');
    console.log('Ìæ® ELOUARATE ART - Railway Deployment');
    console.log(`ÔøΩÔøΩ Server running on port ${port}`);
    console.log(`Ì≥° API Health: http://localhost:${port}/api/health`);
    console.log(`Ì∑™ Database Test: http://localhost:${port}/api/db-test`);
    console.log(`ÔøΩÔøΩ Environment: ${process.env.NODE_ENV}`);
    console.log(`Ì∑ÑÔ∏è Database: ${dbConnected ? 'Railway PostgreSQL ‚úÖ' : 'Mock Data Mode ‚ö†Ô∏è'}`);
    console.log('‚úÖ Ready for production!');
    console.log('ÔøΩÔøΩ ===============================================');
  });
}

// Graceful shutdown
async function cleanup() {
  console.log('Ì≥¥ Shutting down gracefully...');
  if (prisma) {
    await prisma.$disconnect();
  }
  process.exit(0);
}

process.on('SIGTERM', cleanup);
process.on('SIGINT', cleanup);

// Start the server
startServer().catch(console.error);
