generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(cuid())
  email                  String    @unique
  password               String?
  firstName              String
  lastName               String
  phone                  String?
  dateOfBirth            DateTime?
  isActive               Boolean   @default(true)
  isEmailVerified        Boolean   @default(false)
  emailVerificationToken String?
  passwordResetToken     String?
  passwordResetExpiry    DateTime?
  lastLogin              DateTime?
  loginAttempts          Int       @default(0)
  lockoutUntil           DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  @@map("users")
}

model Admin {
  id                  String    @id @default(cuid())
  username            String    @unique
  email               String    @unique
  password            String
  isActive            Boolean   @default(true)
  isSuperAdmin        Boolean   @default(false)
  permissions         String    @default("[]")
  lastLogin           DateTime?
  loginAttempts       Int       @default(0)
  lockoutUntil        DateTime?
  passwordResetToken  String?
  passwordResetExpiry DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("admins")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  color       String    @default("#6366f1")
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  artworks    Artwork[]

  @@map("categories")
}

model Artwork {
  id            String         @id @default(cuid())
  name          String
  description   String
  price         Decimal        @db.Decimal(10, 2)
  originalPrice Decimal?       @db.Decimal(10, 2)
  medium        String
  dimensions    String
  year          Int
  status        String         @default("AVAILABLE")
  isActive      Boolean        @default(true)
  isFeatured    Boolean        @default(false)
  viewCount     Int            @default(0)
  categoryId    String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  images        ArtworkImage[]
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]

  @@map("artworks")
}

model ArtworkImage {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  isPrimary    Boolean  @default(false)
  artworkId    String
  createdAt    DateTime @default(now())
  artwork      Artwork  @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@map("artwork_images")
}

model Customer {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String?
  address   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]

  @@map("customers")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  customerId      String
  status          String      @default("PENDING")
  totalAmount     Decimal     @db.Decimal(10, 2)
  shippingAmount  Decimal     @default(0) @db.Decimal(10, 2)
  taxAmount       Decimal     @default(0) @db.Decimal(10, 2)
  paymentStatus   String      @default("PENDING")
  paymentMethod   String?
  stripePaymentId String?
  shippingAddress String
  billingAddress  String?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]
  customer        Customer    @relation(fields: [customerId], references: [id])
  payments        Payment[]

  @@map("orders")
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  artworkId  String
  quantity   Int     @default(1)
  unitPrice  Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)
  artwork    Artwork @relation(fields: [artworkId], references: [id])
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Payment {
  id            String   @id @default(cuid())
  orderId       String
  amount        Decimal  @db.Decimal(10, 2)
  status        String   @default("PENDING")
  method        String
  stripeId      String?
  transactionId String?
  createdAt     DateTime @default(now())
  order         Order    @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Inquiry {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  status    String   @default("NEW")
  artworkId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("inquiries")
}
